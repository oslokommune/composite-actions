name: 'Setup and install ok'
description: 'Setup and install ok and its dependencies'

inputs:
  ok_version:
    description: "Version of ok to install. Examples: v0.1.0, latest"
    required: true
    default: "latest"
  boilerplate_version:
    description: "Version of Boilerplate to install. Examples: 0.5.16, latest"
    required: true
    default: "latest"
  terraform_version:
    description: "Version of Terraform to install. Examples: 1.10.1, latest"
    required: true
    default: "latest"
  terragrunt_version:
    description: "Version of Terragrunt to install. Examples: 0.71.1, latest"
    required: true
    default: "latest"
  yq_version:
    description: "Version of yq to install. Examples: v4.44.6, latest"
    required: true
    default: "latest"

runs:
  using: "composite"
  steps:
    - name: Set up BIN_DIR
      id: bin-dir
      shell: bash
      run: |
        BIN_DIR="$HOME/.local/bin"
        mkdir -p "$BIN_DIR"
        echo "dir=$BIN_DIR" >> $GITHUB_OUTPUT
        echo "$BIN_DIR" >> "$GITHUB_PATH"


    # We get tool versions in order to use them as cache keys, i.e. figuring out if there's a cache hit or miss.
    - name: Get versions
      shell: bash
      id: versions
      run: |
        get_latest_version() {
          local REPO="$1"
          local VERSION=""
          local MAX_RETRIES=3
          local RETRY_COUNT=0
        
          while [[ -z "$VERSION" && $RETRY_COUNT -lt $MAX_RETRIES ]]; do
            VERSION=$(curl --silent --fail-with-body "https://api.github.com/repos/$REPO/releases/latest" | jq -r '.tag_name')
        
            RETRY_COUNT=$((RETRY_COUNT + 1))
            if [[ -z "$VERSION" ]]; then
              echo "Failed to fetch version for $REPO. Retrying ($RETRY_COUNT/$MAX_RETRIES)..." >&2
              sleep 2
            fi
          done
        
          if [[ -z "$VERSION" ]]; then
            echo "Error: Unable to fetch version for $REPO after $MAX_RETRIES retries." >&2
            exit 1
          fi
        
          echo "$VERSION"
        }

        # Handle ok
        if [[ "${{ inputs.ok_version }}" == "latest" ]]; then
          OK_VERSION=$(get_latest_version "oslokommune/ok")
        else
          OK_VERSION="${{ inputs.ok_version }}"
        fi
        echo "ok_version=$OK_VERSION" >> $GITHUB_OUTPUT

        # Handle boilerplate
        if [[ "${{ inputs.boilerplate_version }}" == "latest" ]]; then
          BOILERPLATE_VERSION=$(get_latest_version "gruntwork-io/boilerplate")
        else
          BOILERPLATE_VERSION="${{ inputs.boilerplate_version }}"
        fi
        echo "boilerplate_version=$BOILERPLATE_VERSION" >> $GITHUB_OUTPUT

        # Handle terraform
        if [[ "${{ inputs.terraform_version }}" == "latest" ]]; then
          TERRAFORM_VERSION=$(get_latest_version "hashicorp/terraform" | sed 's/^v//')
        else
          TERRAFORM_VERSION="${{ inputs.terraform_version }}"
        fi
        echo "terraform_version=$TERRAFORM_VERSION" >> $GITHUB_OUTPUT

        # Handle terragrunt
        if [[ "${{ inputs.terragrunt_version }}" == "latest" ]]; then
          TERRAGRUNT_VERSION=$(get_latest_version "gruntwork-io/terragrunt")
        else
          TERRAGRUNT_VERSION="${{ inputs.terragrunt_version }}"
        fi
        echo "terragrunt_version=$TERRAGRUNT_VERSION" >> $GITHUB_OUTPUT

        # Handle yq
        if [[ "${{ inputs.yq_version }}" == "latest" ]]; then
          YQ_VERSION=$(get_latest_version "mikefarah/yq")
        else
          YQ_VERSION="${{ inputs.yq_version }}"
        fi
        echo "yq_version=$YQ_VERSION" >> $GITHUB_OUTPUT
        
        # Concatenate all versions into one output. This is used as a cache key. This has the effect that
        # if one version is updated, the cache will be invalidated for all tools. This is a trade-off between
        # cache efficiency and simplicity.
        
        VERSIONS=""
        VERSIONS="${VERSIONS}___ok-$OK_VERSION"
        VERSIONS="${VERSIONS}___boilerplate-$BOILERPLATE_VERSION"
        VERSIONS="${VERSIONS}___terraform-$TERRAFORM_VERSION"
        VERSIONS="${VERSIONS}___terragrunt-$TERRAGRUNT_VERSION"
        VERSIONS="${VERSIONS}___yq-$YQ_VERSION"
        echo "VERSIONS=$VERSIONS"
        echo "versions=$VERSIONS" >> $GITHUB_OUTPUT


    - name: Restore cache
      uses: actions/cache/restore@v4
      id: cache-tools-restore
      with:
        path: |
          ${{ steps.bin-dir.outputs.dir }}/ok
          ${{ steps.bin-dir.outputs.dir }}/boilerplate
          ${{ steps.bin-dir.outputs.dir }}/terraform
          ${{ steps.bin-dir.outputs.dir }}/terragrunt
          ${{ steps.bin-dir.outputs.dir }}/yq
        # Example key: "key-___ok-v5.12.0___boilerplate-v0.6.2___terraform-1.12.1___terragrunt-v0.81.3___yq-v4.45.4"
        key: key-${{ steps.versions.outputs.versions }}


    - name: Install tools
      id: install-tools
      shell: bash
      env:
        GH_TOKEN: ${{ github.token }}
        BIN_DIR: ${{ steps.bin-dir.outputs.dir }}
      run: |
        if [[ "${{ steps.cache-tools-restore.outputs.cache-hit }}" == 'true' ]]; then
          exit 0
        fi
        
        echo "Installing ok..."
        gh release download "${{ steps.versions.outputs.ok_version }}" \
          --repo "oslokommune/ok" \
          --pattern "ok_*_linux_amd64.tar.gz" \
          --output - | tar -xzOf - ok > "$BIN_DIR/ok"

        echo "Installing boilerplate..."
        gh release download "${{ steps.versions.outputs.boilerplate_version }}" \
          --repo "gruntwork-io/boilerplate" \
          --pattern "boilerplate_linux_amd64" \
          --output "$BIN_DIR/boilerplate"

        echo "Installing terraform..."
        curl -L "https://releases.hashicorp.com/terraform/${{ steps.versions.outputs.terraform_version }}/terraform_${{ steps.versions.outputs.terraform_version }}_linux_amd64.zip" -o terraform.zip
        unzip -o terraform.zip -d "$BIN_DIR"
        rm -f terraform.zip

        echo "Installing terragrunt..."
        gh release download "${{ steps.versions.outputs.terragrunt_version }}" \
          --repo "gruntwork-io/terragrunt" \
          --pattern "terragrunt_linux_amd64" \
          --output "$BIN_DIR/terragrunt"
        
        echo "Installing yq..."
        gh release download "${{ steps.versions.outputs.yq_version }}" \
          --repo "mikefarah/yq" \
          --pattern "yq_linux_amd64" \
          --output "$BIN_DIR/yq"
        
        # Make all tools executable
        chmod +x "$BIN_DIR"/*


    # Save cache even if the calling job fails. It is useful when developing new workflows, that often fail.
    # See: https://github.com/actions/cache/blob/main/save/README.md#always-save-cache
    - name: Save cache
      if: always() && steps.cache-tools-restore.outputs.cache-hit != 'true' && steps.install-tools.outcome == 'success'
      uses: actions/cache/save@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
      with:
        path: |
          ${{ steps.bin-dir.outputs.dir }}/ok
          ${{ steps.bin-dir.outputs.dir }}/boilerplate
          ${{ steps.bin-dir.outputs.dir }}/terraform
          ${{ steps.bin-dir.outputs.dir }}/terragrunt
          ${{ steps.bin-dir.outputs.dir }}/yq
        key: key-${{ steps.versions.outputs.versions }}
