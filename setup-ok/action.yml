name: 'Setup and install ok'
description: 'Setup and install ok and its dependencies'

inputs:
  ok_version:
    description: "Version of ok to install. Examples: v0.1.0, latest"
    required: true
    # renovate: datasource=github-releases depName=oslokommune/ok
    default: "v5.13.0"
  boilerplate_version:
    description: "Version of Boilerplate to install. Examples: 0.5.16, latest"
    required: true
    # renovate: datasource=github-releases depName=gruntwork-io/boilerplate
    default: "v0.6.3"
  terraform_version:
    description: "Version of Terraform to install. Examples: 1.10.1, latest"
    required: true
    # renovate: datasource=github-releases depName=hashicorp/terraform extractVersion=^v?(?<version>.*)$
    default: "1.12.2"
  terragrunt_version:
    description: "Version of Terragrunt to install. Examples: 0.71.1, latest"
    required: true
    # renovate: datasource=github-releases depName=gruntwork-io/terragrunt
    default: "v0.82.4"
  yq_version:
    description: "Version of yq to install. Examples: v4.44.6, latest"
    required: true
    # renovate: datasource=github-releases depName=mikefarah/yq
    default: "v4.45.4"
  tfswitch_version:
    description: "Version of tfswitch to install. Examples: v1.4.5, latest"
    required: true
    # renovate: datasource=github-releases depName=warrensbox/terraform-switcher
    default: "v1.4.6"

runs:
  using: "composite"
  steps:
    - name: Set up BIN_DIR
      id: bin-dir
      shell: bash
      run: |
        BIN_DIR="$HOME/.local/bin"
        mkdir -p "$BIN_DIR"
        echo "dir=$BIN_DIR" >> $GITHUB_OUTPUT
        echo "$BIN_DIR" >> "$GITHUB_PATH"


    # We get tool versions in order to use them as cache keys, i.e. figuring out if there's a cache hit or miss.
    - name: Get versions
      shell: bash
      id: versions
      env:
        INPUT_OK_VERSION: ${{ inputs.ok_version }}
        INPUT_BOILERPLATE_VERSION: ${{ inputs.boilerplate_version }}
        INPUT_TERRAFORM_VERSION: ${{ inputs.terraform_version }}
        INPUT_TERRAGRUNT_VERSION: ${{ inputs.terragrunt_version }}
        INPUT_YQ_VERSION: ${{ inputs.yq_version }}
        INPUT_TFSWITCH_VERSION: ${{ inputs.tfswitch_version }}
      run: |
        get_latest_version() {
          local REPO="$1"
          local VERSION=""
          local MAX_RETRIES=3
          local RETRY_COUNT=0
        
          while ! VERSION="$(curl -L --fail-with-body "https://api.github.com/repos/$REPO/releases/latest" | jq --exit-status --raw-output '.tag_name')" && [ "$RETRY_COUNT" -lt "$MAX_RETRIES" ]; do
            RETRY_COUNT=$((RETRY_COUNT + 1))
            if [[ -z "$VERSION" ]]; then
              echo "Failed to fetch version for $REPO. Retrying ($RETRY_COUNT/$MAX_RETRIES)..." >&2
              sleep 2
            fi
          done
        
          if [[ -z "$VERSION" ]]; then
            echo "Error: Unable to fetch version for $REPO after $MAX_RETRIES retries." >&2
            exit 1
          fi
        
          echo "$VERSION"
        }

        # Handle ok
        if [[ "$INPUT_OK_VERSION" == "latest" ]]; then
          OK_VERSION=$(get_latest_version "oslokommune/ok")
        else
          OK_VERSION="$INPUT_OK_VERSION"
        fi
        echo "ok_version=$OK_VERSION" >> $GITHUB_OUTPUT

        # Handle boilerplate
        if [[ "$INPUT_BOILERPLATE_VERSION" == "latest" ]]; then
          BOILERPLATE_VERSION=$(get_latest_version "gruntwork-io/boilerplate")
        else
          BOILERPLATE_VERSION="$INPUT_BOILERPLATE_VERSION"
        fi
        echo "boilerplate_version=$BOILERPLATE_VERSION" >> $GITHUB_OUTPUT

        # Handle terraform
        if [[ "$INPUT_TERRAFORM_VERSION" == "latest" ]]; then
          TERRAFORM_VERSION=$(get_latest_version "hashicorp/terraform" | sed 's/^v//')
        else
          TERRAFORM_VERSION="$INPUT_TERRAFORM_VERSION"
        fi
        echo "terraform_version=$TERRAFORM_VERSION" >> $GITHUB_OUTPUT

        # Handle terragrunt
        if [[ "$INPUT_TERRAGRUNT_VERSION" == "latest" ]]; then
          TERRAGRUNT_VERSION=$(get_latest_version "gruntwork-io/terragrunt")
        else
          TERRAGRUNT_VERSION="$INPUT_TERRAGRUNT_VERSION"
        fi
        echo "terragrunt_version=$TERRAGRUNT_VERSION" >> $GITHUB_OUTPUT

        # Handle yq
        if [[ "$INPUT_YQ_VERSION" == "latest" ]]; then
          YQ_VERSION=$(get_latest_version "mikefarah/yq")
        else
          YQ_VERSION="$INPUT_YQ_VERSION"
        fi
        echo "yq_version=$YQ_VERSION" >> $GITHUB_OUTPUT

        # Handle tfswitch
        if [[ "$INPUT_TFSWITCH_VERSION" == "latest" ]]; then
          TFSWITCH_VERSION=$(get_latest_version "warrensbox/terraform-switcher")
        else
          TFSWITCH_VERSION="$INPUT_TFSWITCH_VERSION"
        fi
        echo "tfswitch_version=$TFSWITCH_VERSION" >> $GITHUB_OUTPUT
        
        # Concatenate all versions into one output. This is used as a cache key. This has the effect that
        # if one version is updated, the cache will be invalidated for all tools. This is a trade-off between
        # cache efficiency and simplicity.
        
        VERSIONS=""
        VERSIONS="${VERSIONS}___ok-$OK_VERSION"
        VERSIONS="${VERSIONS}___boilerplate-$BOILERPLATE_VERSION"
        VERSIONS="${VERSIONS}___terraform-$TERRAFORM_VERSION"
        VERSIONS="${VERSIONS}___terragrunt-$TERRAGRUNT_VERSION"
        VERSIONS="${VERSIONS}___yq-$YQ_VERSION"
        VERSIONS="${VERSIONS}___tfswitch-$TFSWITCH_VERSION"
        echo "VERSIONS=$VERSIONS"
        echo "versions=$VERSIONS" >> $GITHUB_OUTPUT


    - name: Restore cache
      uses: actions/cache/restore@v4
      id: cache-tools-restore
      env:
        BIN_DIR: ${{ steps.bin-dir.outputs.dir }}
        VERSIONS: ${{ steps.versions.outputs.versions }}
      with:
        path: |
          ${{ env.BIN_DIR }}/ok
          ${{ env.BIN_DIR }}/boilerplate
          ${{ env.BIN_DIR }}/terraform
          ${{ env.BIN_DIR }}/terragrunt
          ${{ env.BIN_DIR }}/yq
          ${{ env.BIN_DIR }}/tfswitch
        # Example key: "key-___ok-v5.12.0___boilerplate-v0.6.2___terraform-1.12.1___terragrunt-v0.81.3___yq-v4.45.4"
        key: key-${{ env.VERSIONS }}


    - name: Install tools
      id: install-tools
      shell: bash
      env:
        GH_TOKEN: ${{ github.token }}
        BIN_DIR: ${{ steps.bin-dir.outputs.dir }}
        CACHE_HIT: ${{ steps.cache-tools-restore.outputs.cache-hit }}
        OK_VERSION: ${{ steps.versions.outputs.ok_version }}
        BOILERPLATE_VERSION: ${{ steps.versions.outputs.boilerplate_version }}
        TERRAFORM_VERSION: ${{ steps.versions.outputs.terraform_version }}
        TERRAGRUNT_VERSION: ${{ steps.versions.outputs.terragrunt_version }}
        YQ_VERSION: ${{ steps.versions.outputs.yq_version }}
        TFSWITCH_VERSION: ${{ steps.versions.outputs.tfswitch_version }}
      run: |
        if [[ "$CACHE_HIT" == 'true' ]]; then
          exit 0
        fi
        
        gh_download() {
          local REPO="$1"
          local VERSION="$2" 
          local PATTERN="$3"
          local OUTPUT="$4"
          local DESCRIPTION="$5"
          local MAX_RETRIES=3
          local RETRY_COUNT=0

          while [[ $RETRY_COUNT -lt $MAX_RETRIES ]]; do
            if gh release download "$VERSION" --repo "$REPO" --pattern "$PATTERN" --output "$OUTPUT"; then
              return 0
            fi
            
            RETRY_COUNT=$((RETRY_COUNT + 1))
            if [[ $RETRY_COUNT -lt $MAX_RETRIES ]]; then
              echo "Failed to $DESCRIPTION. Retrying ($RETRY_COUNT/$MAX_RETRIES)..." >&2
              sleep 2
            fi
          done
          
          echo "Error: Unable to $DESCRIPTION after $MAX_RETRIES retries." >&2
          return 1
        }

        curl_download() {
          local URL="$1"
          local OUTPUT="$2"
          local DESCRIPTION="$3"
          local MAX_RETRIES=3
          local RETRY_COUNT=0

          while [[ $RETRY_COUNT -lt $MAX_RETRIES ]]; do
            if curl -L "$URL" -o "$OUTPUT"; then
              return 0
            fi
            
            RETRY_COUNT=$((RETRY_COUNT + 1))
            if [[ $RETRY_COUNT -lt $MAX_RETRIES ]]; then
              echo "Failed to $DESCRIPTION. Retrying ($RETRY_COUNT/$MAX_RETRIES)..." >&2
              sleep 2
            fi
          done
          
          echo "Error: Unable to $DESCRIPTION after $MAX_RETRIES retries." >&2
          return 1
        }
        
        echo "Installing ok..."
        gh_download "oslokommune/ok" "$OK_VERSION" "ok_*_linux_amd64.tar.gz" "-" "install ok" | tar -xzOf - ok > "$BIN_DIR/ok"

        echo "Installing boilerplate..."
        gh_download "gruntwork-io/boilerplate" "$BOILERPLATE_VERSION" "boilerplate_linux_amd64" "$BIN_DIR/boilerplate" "install boilerplate"

        echo "Installing terraform..."
        curl_download "https://releases.hashicorp.com/terraform/$TERRAFORM_VERSION/terraform_${TERRAFORM_VERSION}_linux_amd64.zip" "terraform.zip" "install terraform"
        unzip -o terraform.zip -d "$BIN_DIR"
        rm -f terraform.zip

        echo "Installing terragrunt..."
        gh_download "gruntwork-io/terragrunt" "$TERRAGRUNT_VERSION" "terragrunt_linux_amd64" "$BIN_DIR/terragrunt" "install terragrunt"
        
        echo "Installing yq..."
        gh_download "mikefarah/yq" "$YQ_VERSION" "yq_linux_amd64" "$BIN_DIR/yq" "install yq"
        
        echo "Installing tfswitch..."
        gh_download "warrensbox/terraform-switcher" "$TFSWITCH_VERSION" "terraform-switcher_${TFSWITCH_VERSION}_linux_amd64.tar.gz" "-" "install tfswitch" | tar -xzOf - tfswitch > "$BIN_DIR/tfswitch"
        
        # Make all tools executable
        chmod +x "$BIN_DIR"/*


    # Save cache even if the calling job fails. It is useful when developing new workflows, that often fail.
    # See: https://github.com/actions/cache/blob/main/save/README.md#always-save-cache
    - name: Save cache
      if: always() && steps.cache-tools-restore.outputs.cache-hit != 'true' && steps.install-tools.outcome == 'success'
      uses: actions/cache/save@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      env:
        BIN_DIR: ${{ steps.bin-dir.outputs.dir }}
        VERSIONS: ${{ steps.versions.outputs.versions }}
      with:
        path: |
          ${{ env.BIN_DIR }}/ok
          ${{ env.BIN_DIR }}/boilerplate
          ${{ env.BIN_DIR }}/terraform
          ${{ env.BIN_DIR }}/terragrunt
          ${{ env.BIN_DIR }}/yq
          ${{ env.BIN_DIR }}/tfswitch
        key: key-${{ env.VERSIONS }}
