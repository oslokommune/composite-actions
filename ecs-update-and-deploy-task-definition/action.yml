name: "Update and deploy ECS task definition"

description: "Downloads an existing ECS task definition, updates multiple container image URIs, and optionally deploys the updated task definition to the specified ECS service."

inputs:
  aws-region:
    description: "The AWS region to use."
    required: true

  aws-role-arn:
    description: "The ARN of the IAM role to assume."
    required: true

  cluster-name:
    description: "The name of the ECS service's cluster."
    required: true

  service-name:
    description: "The name of the ECS service to deploy to."
    required: true

  task-definition-name:
    description: "The name of the task definition."
    required: true

  images:
    description: "JSON array of containers and images to update in the task definition. See this action's README for the expected format."
    required: true

  deploy:
    description: "Deploy the task definition. Can be either \"true\" or \"false\"."
    required: true

  wait-for-service-stability:
    description: 'Whether to wait for the ECS service to reach stable state after deploying the new task definition. Default "true" Can be either "true" or "false".'
    required: false
    default: "true"


outputs:
  task-definition-file-name:
    description: "The path to the rendered task definition file."
    value: "${{ steps.update-task-definition.outputs.task-definition }}"


runs:
  using: composite

  steps:
    - name: Configure AWS credentials using the OpenID Connect (OIDC) provider üîë
      uses: aws-actions/configure-aws-credentials@ececac1a45f3b08a01d2dd070d28d111c5fe6722 # v4.1.0
      with:
        aws-region: "${{ inputs.aws-region }}"
        role-to-assume: "${{ inputs.aws-role-arn }}"
        role-session-name: "${{ github.event.repository.name }}-gha-${{ github.run_id }}"


    - name: Login to Elastic Container Registry (ECR) üîë
      id: ecr-login
      uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1


    - name: Download existing ECS task definition ‚öôÔ∏è
      shell: bash
      run: |
        aws ecs describe-task-definition \
          --task-definition "${{ inputs.task-definition-name }}" \
          --query taskDefinition \
          | jq 'del(.registeredAt, .registeredBy, .compatibilities, .taskDefinitionArn, .requiresAttributes, .revision, .status)' > "task-definition.json"


    - name: Update ECS task definition with new image URIs ‚öôÔ∏è
      id: update-task-definition
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      env:
        INPUT_IMAGES: ${{ inputs.images }}
      with:
        script: |
          const fs = require('fs');
          
          // Set filenames
          const taskDefFile = 'task-definition.json';
          const outputTaskDefFile = 'updated-task-definition.json';
          
          // Read task definition
          const taskDef = JSON.parse(fs.readFileSync(taskDefFile, 'utf8'));
          
          // Get ECR registry URL from the ecr-login step
          const ecrRegistry = '${{ steps.ecr-login.outputs.registry }}';
          console.log(`Using ECR registry: ${ecrRegistry}`);
          
          // Parse images JSON
          const imagesInput = core.getInput('images');
          console.log("Images input", imagesInput);
          
          const imagesJson = JSON.parse(imagesInput);
          const containerNames = Object.keys(imagesJson);
          console.log(`Found ${containerNames.length} container image(s) to update`);
          
          // Update container images
          for (const containerName of containerNames) {
            // Get container details from the object structure
            const imageConfig = imagesJson[containerName];
            const imageRepository = imageConfig.imageRepository;
            const imageDigest = imageConfig.imageDigest;
          
            // Create full image URI with ECR registry and digest
            const imageUri = `${ecrRegistry}/${imageRepository}@${imageDigest}`;
            console.log(`Updating container '${containerName}' with image '${imageUri}'`);
          
            // Find container in task definition
            const containerIndex = taskDef.containerDefinitions.findIndex(
              container => container.name === containerName
            );
          
            if (containerIndex >= 0) {
              // Update container image
              taskDef.containerDefinitions[containerIndex].image = imageUri;
              console.log(`Successfully updated container '${containerName}'`);
            } else {
              // Container not found
              core.warning(`Container '${containerName}' not found in task definition`);
            }
          }
          
          // Write updated task definition to file
          fs.writeFileSync(outputTaskDefFile, JSON.stringify(taskDef, null, 2));
          console.log('Task definition update complete');
          
          // Set output
          core.setOutput('task-definition', outputTaskDefFile);


    - if: inputs.deploy == 'true'
      name: Deploy task definition üöÄ
      id: deploy
      uses: aws-actions/amazon-ecs-deploy-task-definition@f7b2b96b7fe1b20b452641919c0559bcc19ab8f9 # v2.3.3
      with:
        cluster: "${{ inputs.cluster-name }}"
        service: "${{ inputs.service-name }}"
        task-definition: "${{ steps.update-task-definition.outputs.task-definition }}"
        wait-for-service-stability: "${{ inputs.wait-for-service-stability }}"


    - if: inputs.deploy == 'false'
      name: Write simple summary for non-deployment üìù
      shell: bash
      run: |
        echo "**No deployment was performed.**" >> $GITHUB_STEP_SUMMARY


    - if: inputs.deploy == 'true'
      name: Write deployment summary üìù
      shell: bash
      env:
        IMAGES_JSON: ${{ inputs.images }}
        SERVICE_NAME: ${{ inputs.service-name }}
        AWS_REGION: ${{ inputs.aws-region }}
        CLUSTER_NAME: ${{ inputs.cluster-name }}
        ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
        TASK_DEFINITION_NAME: ${{ inputs.task-definition-name }}
        TASK_DEFINITION_ARN: ${{ steps.deploy.outputs.task-definition-arn }}
      run: |
        # To test the summary locally, copy the rest of this workflow into a script, uncomment the variables, and run.
        #
        #AWS_ACCOUNT_ID='123456789012'
        #ECR_REGISTRY="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
        #GITHUB_STEP_SUMMARY="/dev/stdout"
        #IMAGES_JSON='{"init-container":{"imageRepository":"pirates-dev-too-tikki-init","imageDigest":"sha256:0d4626f3160ffcb561926074c0c3305a0faa7955","imageTag":"2025-03-06_16-27-31_main_gha-13703418764_sha-b8a861e"},"too-tikki":{"imageRepository":"pirates-dev-too-tikki-main","imageDigest":"sha256:c5777a8d16b664157b5ac56196f70527f1ce10e1","imageTag":"2025-03-06_16-27-31_main_gha-13703418764_sha-b8a861e"}}'
        #SERVICE_NAME='too-tikki'
        #AWS_REGION='eu-west-1'
        #CLUSTER_NAME='pirates-dev'
        #TASK_DEFINITION_NAME='too-tikki'
        #TASK_DEFINITION_ARN="arn:aws:ecs:$AWS_REGION:$AWS_ACCOUNT_ID:task-definition/$TASK_DEFINITION_NAME:143"
        
        IMAGE_COUNT=$(echo "$IMAGES_JSON" | jq 'length')
        AWS_ACCOUNT_ID=$(echo "$ECR_REGISTRY" | cut -d. -f1)
        SERVICE_URL="https://$AWS_REGION.console.aws.amazon.com/ecs/v2/clusters/$CLUSTER_NAME/services/$SERVICE_NAME?region=$AWS_REGION"
        TASK_REVISION=$(echo "$TASK_DEFINITION_ARN" | cut -d ':' -f 7)
        TASK_DEF_URL="https://$AWS_REGION.console.aws.amazon.com/ecs/v2/task-definitions/$TASK_DEFINITION_NAME/$TASK_REVISION/containers?region=$AWS_REGION"
        CONTAINER_ROWS=$(echo "$IMAGES_JSON" | jq -r 'to_entries[] | "| \(.key) | \(.value.imageRepository) | `\(.value.imageDigest)` | `\(.value.imageTag)` |"')
        
        #######################################
        ### Write the deployment summary üìù ###
        #######################################
        
        cat << EOF >> $GITHUB_STEP_SUMMARY
        
        ## Deployment summary üìã
        
        ‚úÖ Updated task definition successfully.
        
        | Item | Link |
        |-------------------|----------------------------------------------------------|
        | ECS service       | [$SERVICE_NAME]($SERVICE_URL)                            |
        | Task definition   | [$TASK_DEFINITION_NAME:$TASK_REVISION]($TASK_DEF_URL)    |
        
        ### Container(s) updated üì¶
        
        | Container | Repository | Digest | Tag |
        | --- | --- | --- | --- |
        $CONTAINER_ROWS
        EOF
