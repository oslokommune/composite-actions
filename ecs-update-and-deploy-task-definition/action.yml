const containerName = imageConfig['container-name'];name: "Update and optionally deploy ECS task definition"

description: "Downloads an existing ECS task definition, updates multiple container image URIs, and optionally deploys the updated task definition to the specified ECS service."

inputs:
  aws-region:
    description: "The AWS region to use."
    required: true

  aws-role-arn:
    description: "The ARN of the IAM role to assume."
    required: true

  cluster-name:
    description: "The name of the ECS service's cluster."
    required: true

  service-name:
    description: "The name of the ECS service to deploy to."
    required: true

  task-definition-name:
    description: "The name of the task definition."
    required: true

  download-existing-task-definition:
    description: "Download the existing task definition from AWS."
    required: true

  images:
    description: "JSON array of containers and images to update in the task definition. Format: [{\"container-name\": \"name\", \"image\": \"uri\"}]"
    required: true

  deploy:
    description: "Deploy the task definition. Can be either \"true\" or \"false\"."
    required: true


outputs:
  task-definition-file-name:
    description: "The path to the rendered task definition file."
    value: "${{ steps.update-task-definition.outputs.task-definition }}"


runs:
  using: composite

  steps:
    - name: Configure AWS credentials using the OpenID Connect (OIDC) provider 🔑
      uses: aws-actions/configure-aws-credentials@ececac1a45f3b08a01d2dd070d28d111c5fe6722 # v4.1.0
      with:
        aws-region: "${{ inputs.aws-region }}"
        role-to-assume: "${{ inputs.aws-role-arn }}"
        role-session-name: "${{ github.event.repository.name }}-gha-${{ github.run_id }}"


    - name: Login to Elastic Container Registry (ECR) 🔑
      id: ecr-login
      uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1


    - if: inputs.download-existing-task-definition == 'true'
      name: Download existing ECS task definition ⚙️
      shell: bash
      run: |
        aws ecs describe-task-definition \
          --task-definition "${{ inputs.task-definition-name }}" \
          --query taskDefinition \
          | jq 'del(.registeredAt, .registeredBy, .compatibilities, .taskDefinitionArn, .requiresAttributes, .revision, .status)' > "task-definition.json"


    - name: Update ECS task definition with new image URIs ⚙️
      id: update-task-definition
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      with:
        script: |
          const fs = require('fs');
          var inputs = ${{ toJSON(inputs) }}
          
          // Set filenames
          const taskDefFile = 'task-definition.json';
          const outputTaskDefFile = 'updated-task-definition.json';
          
          // Read task definition
          const taskDef = JSON.parse(fs.readFileSync(taskDefFile, 'utf8'));
          
          // Get ECR registry URL from the ecr-login step
          const ecrRegistry = '${{ steps.ecr-login.outputs.registry }}';
          console.log(`Using ECR registry: ${ecrRegistry}`);
          
          // Parse images JSON
          //const imagesJson = JSON.parse('${{ inputs.images }}');
          const imagesJson = inputs['images']
          
          console.log(`Found ${imagesJson.length} container image(s) to update`);
          
          // Update container images
          imagesJson.forEach(imageConfig => {
            // Create full image URI with ECR registry
            const imageUri = `${ecrRegistry}/${imageConfig.image}`;
          
            console.log(`Updating container '${containerName}' with image '${imageUri}'`);
          
            // Find container in task definition
            const containerIndex = taskDef.containerDefinitions.findIndex(
              container => container.name === containerName
            );
          
            if (containerIndex >= 0) {
              // Update container image
              taskDef.containerDefinitions[containerIndex].image = imageUri;
              console.log(`Successfully updated container '${containerName}'`);
            } else {
              // Container not found
              core.warning(`Container '${containerName}' not found in task definition`);
            }
          });
          
          // Write updated task definition to file
          fs.writeFileSync(outputTaskDefFile, JSON.stringify(taskDef, null, 2));
          console.log('Task definition update complete');
          
          // Set output
          core.setOutput('task-definition', outputTaskDefFile);


    - if: inputs.deploy == 'true'
      name: Deploy container 🚀
      uses: aws-actions/amazon-ecs-deploy-task-definition@8230edfe842008418c5275908cae75e51d3befb2 # v2.3.0
      with:
        task-definition: "${{ steps.update-task-definition.outputs.task-definition }}"
        service: "${{ inputs.service-name }}"
        cluster: "${{ inputs.cluster-name }}"
        wait-for-service-stability: true
