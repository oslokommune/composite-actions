name: "Update and deploy ECS task definition"

description: "Downloads an existing ECS task definition, updates multiple container image URIs, and optionally deploys the updated task definition to the specified ECS service."

inputs:
  aws-region:
    description: "The AWS region to use."
    required: true

  aws-role-arn:
    description: "The ARN of the IAM role to assume."
    required: true

  cluster-name:
    description: "The name of the ECS service's cluster."
    required: true

  service-name:
    description: "The name of the ECS service to deploy to."
    required: true

  task-definition-name:
    description: "The name of the task definition."
    required: true

  images:
    description: "JSON array of containers and images to update in the task definition. Format: [{\"container-name\": \"name\", \"image\": \"uri\"}]"
    required: true

  deploy:
    description: "Deploy the task definition. Can be either \"true\" or \"false\"."
    required: true


outputs:
  task-definition-file-name:
    description: "The path to the rendered task definition file."
    value: "${{ steps.update-task-definition.outputs.task-definition }}"


runs:
  using: composite

  steps:
    - name: Configure AWS credentials using the OpenID Connect (OIDC) provider 🔑
      uses: aws-actions/configure-aws-credentials@ececac1a45f3b08a01d2dd070d28d111c5fe6722 # v4.1.0
      with:
        aws-region: "${{ inputs.aws-region }}"
        role-to-assume: "${{ inputs.aws-role-arn }}"
        role-session-name: "${{ github.event.repository.name }}-gha-${{ github.run_id }}"


    - name: Login to Elastic Container Registry (ECR) 🔑
      id: ecr-login
      uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1


    - name: Download existing ECS task definition ⚙️
      shell: bash
      run: |
        aws ecs describe-task-definition \
          --task-definition "${{ inputs.task-definition-name }}" \
          --query taskDefinition \
          | jq 'del(.registeredAt, .registeredBy, .compatibilities, .taskDefinitionArn, .requiresAttributes, .revision, .status)' > "task-definition.json"


    - name: Update ECS task definition with new image URIs ⚙️
      id: update-task-definition
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      env:
        INPUT_IMAGES: ${{ inputs.images }}
      with:
        script: |
          const fs = require('fs');
          
          // Set filenames
          const taskDefFile = 'task-definition.json';
          const outputTaskDefFile = 'updated-task-definition.json';
          
          // Read task definition
          const taskDef = JSON.parse(fs.readFileSync(taskDefFile, 'utf8'));
          
          // Get ECR registry URL from the ecr-login step
          const ecrRegistry = '${{ steps.ecr-login.outputs.registry }}';
          console.log(`Using ECR registry: ${ecrRegistry}`);
          
          // Parse images JSON
          const imagesInput = core.getInput('images');
          console.log("Images input", imagesInput);
          
          const imagesJson = JSON.parse(imagesInput);
          console.log(`Found ${imagesJson.length} container image(s) to update`);
          
          // Update container images
          imagesJson.forEach(imageConfig => {
            // Create full image URI with ECR registry
            const containerName = imageConfig['container-name'];
            const imageUri = `${ecrRegistry}/${imageConfig.image}`;
          
            console.log(`Updating container '${containerName}' with image '${imageUri}'`);
          
            // Find container in task definition
            const containerIndex = taskDef.containerDefinitions.findIndex(
              container => container.name === containerName
            );
          
            if (containerIndex >= 0) {
              // Update container image
              taskDef.containerDefinitions[containerIndex].image = imageUri;
              console.log(`Successfully updated container '${containerName}'`);
            } else {
              // Container not found
              core.warning(`Container '${containerName}' not found in task definition`);
            }
          });
          
          // Write updated task definition to file
          fs.writeFileSync(outputTaskDefFile, JSON.stringify(taskDef, null, 2));
          console.log('Task definition update complete');
          
          // Set output
          core.setOutput('task-definition', outputTaskDefFile);


    - if: inputs.deploy == 'true'
      name: Deploy task definition 🚀
      id: deploy
      uses: aws-actions/amazon-ecs-deploy-task-definition@8230edfe842008418c5275908cae75e51d3befb2 # v2.3.0
      with:
        cluster: "${{ inputs.cluster-name }}"
        service: "${{ inputs.service-name }}"
        task-definition: "${{ steps.update-task-definition.outputs.task-definition }}"
        wait-for-service-stability: true


    - name: Get deployed task definition revision 📋
      id: get-task-revision
      if: inputs.deploy == 'true'
      shell: bash
      run: |
        REVISION=$(aws ecs describe-services \
          --cluster "${{ inputs.cluster-name }}" \
          --services "${{ inputs.service-name }}" \
          --query "services[0].taskDefinition" \
          --output text | awk -F'/' '{print $2}' | awk -F':' '{print $2}')
        echo "revision=$REVISION" >> $GITHUB_OUTPUT


    - name: Write deployment summary 📝
      shell: bash
      env:
        IMAGES_JSON: ${{ inputs.images }}
        ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
        AWS_REGION: ${{ inputs.aws-region }}
        CLUSTER_NAME: ${{ inputs.cluster-name }}
        SERVICE_NAME: ${{ inputs.service-name }}
        TASK_DEFINITION_NAME: ${{ inputs.task-definition-name }}
        DEPLOY: ${{ inputs.deploy }}
        TASK_REVISION: ${{ steps.get-task-revision.outputs.revision }}
        TASK_DEFINITION_ARN: ${{ steps.deploy.outputs.task-definition-arn }}
        RUN_TASK_ARN: ${{ steps.deploy.outputs.run-task-arn }}
      run: |
        # Example values to be used for testing in a local script:
        GITHUB_STEP_SUMMARY="/dev/stdout"
        IMAGES_JSON='[{"container-name":"flyway","image":"flyway@sha256:0d4626f3160ffcb561926074c0c3305a0faa7955"},{"container-name":"too-tikki","image":"pirates-dev-too-tikki@sha256:c5777a8d16b664157b5ac56196f70527f1ce10e1"}]'
        AWS_REGION='eu-west-1'
        ECR_REGISTRY="123456789012.dkr.ecr.$AWS_REGION.amazonaws.com"
        CLUSTER_NAME='pirates-dev'
        SERVICE_NAME='too-tikki'
        TASK_DEFINITION_NAME='too-tikki'
        DEPLOY='true'
        TASK_REVISION='42'
        TASK_DEFINITION_ARN='arn:aws:ecs:eu-west-1:123456789012:task-definition/too-tikki:42'
        RUN_TASK_ARN='["arn:aws:ecs:eu-west-1:123456789012:task/pirates-dev/84907460b8b24177b892f577fcf7aae6"]'

        # Get AWS account ID from the ECR registry URL
        AWS_ACCOUNT_ID=$(echo "$ECR_REGISTRY" | cut -d. -f1)

        # Count the number of images being deployed
        IMAGE_COUNT=$(echo "$IMAGES_JSON" | jq 'length')

        echo "## Deployment summary 📋" >> $GITHUB_STEP_SUMMARY

        # Add summary statement below title
        if [[ "$DEPLOY" == "true" ]]; then
          echo "✅ Updated task definition with $IMAGE_COUNT container image(s) and deployed to ECS service \`$SERVICE_NAME\`." >> $GITHUB_STEP_SUMMARY
        else
          echo "Updated task definition with $IMAGE_COUNT container image(s). **No deployment was performed.**" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY

        echo "### Containers(s) 📦" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Parse and display container images in a table
        echo "| Container | Image URI |" >> $GITHUB_STEP_SUMMARY
        echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
        echo "$IMAGES_JSON" | jq -r '.[] | "| \(.["container-name"]) | `'"$ECR_REGISTRY"'/\(.image)` |"' >> $GITHUB_STEP_SUMMARY

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Task details ⚙️" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
        echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
        echo "| AWS Region | \`$AWS_REGION\` |" >> $GITHUB_STEP_SUMMARY

        # Cluster with link
        CLUSTER_URL="https://$AWS_ACCOUNT_ID.$AWS_REGION.console.aws.amazon.com/ecs/v2/clusters/$CLUSTER_NAME?region=$AWS_REGION"
        echo "| Cluster | \`$CLUSTER_NAME\` [[View]($CLUSTER_URL)] |" >> $GITHUB_STEP_SUMMARY

        # Service with link
        SERVICE_URL="https://$AWS_ACCOUNT_ID.$AWS_REGION.console.aws.amazon.com/ecs/v2/clusters/$CLUSTER_NAME/services/$SERVICE_NAME?region=$AWS_REGION"
        echo "| Service | \`$SERVICE_NAME\` [[View]($SERVICE_URL)] |" >> $GITHUB_STEP_SUMMARY

        # Task Definition URL for later use
        TASK_DEF_URL="https://$AWS_ACCOUNT_ID.$AWS_REGION.console.aws.amazon.com/ecs/v2/task-definitions/$TASK_DEFINITION_NAME/$TASK_REVISION/containers?region=$AWS_REGION"

        if [[ "$DEPLOY" == "true" ]]; then
          # Extract the first task ARN from RUN_TASK_ARN array if available
          if [ -n "$RUN_TASK_ARN" ] && [ "$RUN_TASK_ARN" != "null" ]; then
            FIRST_TASK=$(echo "$RUN_TASK_ARN" | jq -r '.[0]')
            # Extract task ID from the ARN
            TASK_ID=$(echo "$FIRST_TASK" | sed -E 's/.*task\/[^\/]+\/([^\/]+)$/\1/')
            # Create task URL
            TASK_URL="https://$AWS_ACCOUNT_ID.$AWS_REGION.console.aws.amazon.com/ecs/v2/clusters/$CLUSTER_NAME/services/$SERVICE_NAME/tasks/$TASK_ID/configuration?region=$AWS_REGION"
            # Display task ARN with link
            echo "| Task ARN | \`$FIRST_TASK\` [[View]($TASK_URL)] |" >> $GITHUB_STEP_SUMMARY
          fi

          # Show task definition ARN with link if available
          if [ -n "$TASK_DEFINITION_ARN" ] && [ "$TASK_DEFINITION_ARN" != "null" ]; then
            echo "| Task Definition ARN | \`$TASK_DEFINITION_ARN\` [[View]($TASK_DEF_URL)] |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "| Deployment | ✅ Deployed |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Deployment | ❌ Not deployed |" >> $GITHUB_STEP_SUMMARY
        fi
