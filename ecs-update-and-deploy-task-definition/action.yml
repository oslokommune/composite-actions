name: "Update and deploy ECS task definition"

description: |
  Downloads an existing ECS task definition, updates multiple container image URIs, optionally deploys the updated task
  definition to the specified ECS service, and writes the images deployed to an SSM parameter.

inputs:
  aws-region:
    description: "The AWS region to use."
    required: true

  aws-role-arn:
    description: "The ARN of the IAM role to assume."
    required: true

  cluster-name:
    description: "The name of the ECS service's cluster."
    required: true

  service-name:
    description: "The name of the ECS service to deploy to."
    required: true

  task-definition-name:
    description: "The name of the task definition."
    required: true

  images:
    description: "JSON array of containers and images to update in the task definition. See this action's README for the expected format."
    required: true

  deploy:
    description: "Deploy the task definition. Can be either \"true\" or \"false\"."
    required: true

  wait-for-service-stability:
    description: 'Whether to wait for the ECS service to reach stable state after deploying the new task definition. Default "true" Can be either "true" or "false".'
    required: false
    default: "true"

  images-ssm-parameter-name:
    description: 'The name of the SSM parameter to store the images JSON in. Must be provided if deploy is "true"'
    required: false


runs:
  using: composite

  steps:


    - name: Check if images-ssm-parameter-name is empty ‚ùå
      if: inputs.deploy == 'true' && inputs.images-ssm-parameter-name == ''
      shell: bash
      run: |
        echo "Error: images-ssm-parameter-name is required but not provided."
        exit 1


    - name: Configure AWS credentials using the OpenID Connect (OIDC) provider üîë
      uses: aws-actions/configure-aws-credentials@ececac1a45f3b08a01d2dd070d28d111c5fe6722 # v4.1.0
      with:
        aws-region: "${{ inputs.aws-region }}"
        role-to-assume: "${{ inputs.aws-role-arn }}"
        role-session-name: "${{ github.event.repository.name }}-gha-${{ github.run_id }}"


    - name: Login to Elastic Container Registry (ECR) üîë
      id: ecr-login
      uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1


    - name: Download ECS task definition üè∑Ô∏è
      id: get-task-info
      shell: bash
      env:
        TASK_DEFINITION_NAME: "${{ inputs.task-definition-name }}"
      run: |
        TASK_RESPONSE=$(aws ecs describe-task-definition \
          --task-definition "$TASK_DEFINITION_NAME" \
          --include TAGS)
        
        # Remove unnecessary fields from the task definition
        echo "$TASK_RESPONSE" | jq '.taskDefinition | 
          del(.registeredAt, .registeredBy, .compatibilities, .taskDefinitionArn, 
              .requiresAttributes, .revision, .status)' > "task-definition.json"
        
        # Get tags from the API response
        TAGS=$(echo "$TASK_RESPONSE" | jq '.tags')
        
        # Add tags to task definition
        jq --argjson tags "$TAGS" '. + {tags: $tags}' "task-definition.json" > "temp.json" && mv "temp.json" "task-definition.json"
        
        echo "‚úÖ Task definition with tags saved to task-definition.json"


    - name: Update ECS task definition with new image URIs ‚öôÔ∏è
      id: update-task-definition
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      env:
        INPUT_IMAGES: ${{ inputs.images }}
      with:
        script: |
          const fs = require('fs');
          
          // Set filenames
          const taskDefFile = "task-definition.json";
          const outputTaskDefFile = 'updated-task-definition.json';
          
          // Read task definition
          const taskDef = JSON.parse(fs.readFileSync(taskDefFile, 'utf8'));
          
          // Get ECR registry URL from the ecr-login step
          const ecrRegistry = '${{ steps.ecr-login.outputs.registry }}';
          console.log(`Using ECR registry: ${ecrRegistry}`);
          
          // Parse images JSON
          const imagesInput = core.getInput('images');
          console.log("Images input", imagesInput);
          
          const imagesJson = JSON.parse(imagesInput);
          const containerNames = Object.keys(imagesJson);
          console.log(`Found ${containerNames.length} container image(s) to update`);
          
          // Update container images
          for (const containerName of containerNames) {
            // Get container details from the object structure
            const imageConfig = imagesJson[containerName];
            const imageRepository = imageConfig.imageRepository;
            const imageDigest = imageConfig.imageDigest;
          
            // Create full image URI with ECR registry and digest
            const imageUri = `${ecrRegistry}/${imageRepository}@${imageDigest}`;
            console.log(`Updating container '${containerName}' with image '${imageUri}'`);
          
            // Find container in task definition
            const containerIndex = taskDef.containerDefinitions.findIndex(
              container => container.name === containerName
            );
          
            if (containerIndex >= 0) {
              // Update container image
              taskDef.containerDefinitions[containerIndex].image = imageUri;
              console.log(`Successfully updated container '${containerName}'`);
            } else {
              // Container not found
              core.warning(`Container '${containerName}' not found in task definition`);
            }
          }
          
          // Write updated task definition to file
          fs.writeFileSync(outputTaskDefFile, JSON.stringify(taskDef, null, 2));
          console.log('Task definition update complete');
          
          // Set output
          core.setOutput('task-definition-filename', outputTaskDefFile);


    - if: inputs.deploy == 'true'
      name: Deploy task definition üöÄ
      id: deploy
      shell: bash
      env:
        CLUSTER: "${{ inputs.cluster-name }}"
        SERVICE: "${{ inputs.service-name }}"
        TASK_DEFINITION_FAMILY: "${{ inputs.service-name }}"
        TASK_DEFINITION_FILENAME: "${{ steps.update-task-definition.outputs.task-definition-filename }}"
        WAIT_FOR_SERVICE_STABILITY: "${{ inputs.wait-for-service-stability }}"
      run: |
        echo Registering task definition...
        OUTPUT=$(aws ecs register-task-definition --cli-input-json "file://$TASK_DEFINITION_FILENAME")
        TASK_DEF_REVISION=$(echo "$OUTPUT" | jq -r '.taskDefinition.taskDefinitionArn' | rev | cut -d':' -f1 | rev)
        
        echo "Done! Task def revision: $TASK_DEF_REVISION"
        echo
        echo Updating ECS service...
        aws ecs update-service \
          --cluster "$CLUSTER" \
          --service "$SERVICE" \
          --task-definition "$TASK_DEFINITION_FAMILY:$TASK_DEF_REVISION" \
          --propagate-tags SERVICE
        
        echo "‚úÖ Deployment successful."

        echo "::set-output name=task-definition-revision::$TASK_DEF_REVISION"


    - if: inputs.deploy == 'true'
      name: Write deployed images to SSM parameter üìù
      shell: bash
      env:
        DEPLOYED_IMAGES: ${{ inputs.images }}
        SSM_PARAMETER_NAME: ${{ inputs.images-ssm-parameter-name }}
      run: |
        echo "Deployed images:"
        echo $DEPLOYED_IMAGES | jq
        
        CURRENT_IMAGES=$(aws ssm get-parameter \
          --name "$SSM_PARAMETER_NAME" \
          --query "Parameter.Value" \
          --output text)
        echo "Current images:"
        echo $CURRENT_IMAGES
        echo $CURRENT_IMAGES | jq

        MERGED_IMAGES=$(echo "$CURRENT_IMAGES" | jq --argjson new "$DEPLOYED_IMAGES" '. + $new')
        echo "Merged images:"
        echo $MERGED_IMAGES | jq
        
        aws ssm put-parameter \
          --name "$SSM_PARAMETER_NAME" \
          --type "String" \
          --value "$MERGED_IMAGES" \
          --overwrite
        echo "‚úÖ Wrote deployed images to SSM parameter '$SSM_PARAMETER_NAME'"


    - if: inputs.deploy == 'false'
      name: Write simple summary for non-deployment üìù
      shell: bash
      run: |
        echo "**No deployment was performed.**" >> $GITHUB_STEP_SUMMARY


    - if: inputs.deploy == 'true'
      name: Write deployment summary üìù
      shell: bash
      env:
        IMAGES_JSON: ${{ inputs.images }}
        SERVICE_NAME: ${{ inputs.service-name }}
        AWS_REGION: ${{ inputs.aws-region }}
        CLUSTER_NAME: ${{ inputs.cluster-name }}
        ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
        TASK_DEFINITION_NAME: ${{ inputs.task-definition-name }}
        TASK_DEFINITION_REVISION: ${{ steps.deploy.outputs.task-definition-revision }}
        IMAGES_SSM_PARAMETER_NAME: ${{ inputs.images-ssm-parameter-name }}
      run: |
        # To test the summary locally, copy the rest of this workflow into a script, uncomment the variables, and run.
        #
        #AWS_ACCOUNT_ID='123456789012'
        #ECR_REGISTRY="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
        #GITHUB_STEP_SUMMARY="/dev/stdout"
        #IMAGES_JSON='{"init-container":{"imageRepository":"pirates-dev-too-tikki-init","imageDigest":"sha256:0d4626f3160ffcb561926074c0c3305a0faa7955","imageTag":"2025-03-06_16-27-31_main_gha-13703418764_sha-b8a861e"},"too-tikki":{"imageRepository":"pirates-dev-too-tikki-main","imageDigest":"sha256:c5777a8d16b664157b5ac56196f70527f1ce10e1","imageTag":"2025-03-06_16-27-31_main_gha-13703418764_sha-b8a861e"}}'
        #SERVICE_NAME='too-tikki'
        #AWS_REGION='eu-west-1'
        #CLUSTER_NAME='pirates-dev'
        #TASK_DEFINITION_NAME='too-tikki'
        #TASK_DEFINITION_REVISION=143"
        #IMAGES_SSM_PARAMETER_NAME="/ecs/pirates-dev/too-tikki/images"
        
        IMAGE_COUNT=$(echo "$IMAGES_JSON" | jq 'length')
        AWS_ACCOUNT_ID=$(echo "$ECR_REGISTRY" | cut -d. -f1)
        SERVICE_URL="https://$AWS_REGION.console.aws.amazon.com/ecs/v2/clusters/$CLUSTER_NAME/services/$SERVICE_NAME?region=$AWS_REGION"
        TASK_DEF_URL="https://$AWS_REGION.console.aws.amazon.com/ecs/v2/task-definitions/$TASK_DEFINITION_NAME/$TASK_DEFINITION_REVISION/containers?region=$AWS_REGION"
        CONTAINER_ROWS=$(echo "$IMAGES_JSON" | jq -r 'to_entries[] | "| \(.key) | \(.value.imageRepository) | `\(.value.imageDigest)` | `\(.value.imageTag)` |"')
        
        #######################################
        ### Write the deployment summary üìù ###
        #######################################
        
        cat << EOF >> $GITHUB_STEP_SUMMARY
        
        ## Deployment summary üìã
        
        ‚úÖ Successfully updated task definition.
        
        | Item | Link |
        |-------------------|---------------------------------------------------------------------|
        | ECS service       | [$SERVICE_NAME]($SERVICE_URL)                                       |
        | Task definition   | [$TASK_DEFINITION_NAME:$TASK_DEFINITION_REVISION]($TASK_DEF_URL)    |
        
        ### Container(s) updated üì¶
        | Container | ECR repository | Digest | Tag |
        | --------- | -------------- | ------ | --- |
        $CONTAINER_ROWS
        
        EOF
        
        if [ -n "$IMAGES_SSM_PARAMETER_NAME" ]; then  
          SSM_URL="https://$AWS_REGION.console.aws.amazon.com/systems-manager/parameters/$IMAGES_SSM_PARAMETER_NAME/description?region=$AWS_REGION"  
          echo "‚úÖ Successfully wrote image metadata to SSM parameter [$IMAGES_SSM_PARAMETER_NAME]($SSM_URL)." >> $GITHUB_STEP_SUMMARY  
        fi
