name: 'Renovate Metadata'
description: 'Check if PR is from Renovate and get update metadata'

inputs:
  skip-verification:
    description: 'Skip commit signature verification'
    required: false
    default: 'false'
  renovate-actor:
    description: 'GitHub username of the Renovate bot'
    required: false
    default: 'kjoremiljo-renovate[bot]'

outputs:
  is-renovate:
    description: 'Whether the PR is from Renovate'
    value: ${{ steps.check-author-and-parse-metadata.outputs.is_renovate }}
  dependencies:
    description: 'JSON string containing all updated dependencies information'
    value: ${{ steps.check-author-and-parse-metadata.outputs.dependencies }}

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1
      with:
        fetch-depth: 5

    - name: Verify commit signature
      if: ${{ inputs.skip-verification != 'true' }}
      shell: bash
      run: |
        git verify-commit HEAD^
      continue-on-error: true

    - name: Check author and parse Renovate metadata
      id: check-author-and-parse-metadata
      uses: actions/github-script@v6
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const isRenovate = context.actor === '${{ inputs.renovate-actor }}';
          core.setOutput('is_renovate', isRenovate.toString());

          if (!isRenovate) {
            console.log('PR is not from Renovate');
            return;
          }

          const { data: commit } = await github.rest.repos.getCommit({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha
          });

          const commitMessage = commit.commit.message;
          const metadata = commitMessage.split('---')[1];
          
          if (!metadata) {
            core.setFailed('No metadata found in commit message');
            return;
          }

          const yamlData = require('js-yaml').load(metadata);
          
          if (!yamlData || !yamlData['updated-dependencies'] || yamlData['updated-dependencies'].length === 0) {
            core.setFailed('Invalid or empty metadata');
            return;
          }

          const dependencies = yamlData['updated-dependencies'];
          
          core.setOutput('dependencies', JSON.stringify(dependencies));

          console.log('Parsed metadata:', JSON.stringify(dependencies, null, 2));
