name: 'Renovate Metadata'
description: 'Check if PR is from Renovate and get update metadata'

inputs:
  skip-verification:
    description: 'Skip commit signature verification'
    required: false
    default: 'false'
  renovate-actor:
    description: 'GitHub username of the Renovate bot'
    required: false
    default: 'kjoremiljo-renovate[bot]'

outputs:
  is-renovate:
    description: 'Whether the PR is from Renovate'
    value: ${{ steps.check-author.outputs.is_renovate }}
  update-type:
    description: 'Renovate update type'
    value: ${{ steps.parse-metadata.outputs.update_type }}
  dependency-name:
    description: 'Name of the updated dependency'
    value: ${{ steps.parse-metadata.outputs.dependency_name }}
  new-version:
    description: 'New version of the updated dependency'
    value: ${{ steps.parse-metadata.outputs.new_version }}

runs:
  using: "composite"
  steps:
    - name: Check actor
      id: check-author
      shell: bash
      run: |
        if [[ "${{ github.actor }}" == "${{ inputs.renovate-actor }}" ]]; then
          echo "is_renovate=true" >> $GITHUB_OUTPUT
        else
          echo "is_renovate=false" >> $GITHUB_OUTPUT
        fi

    - name: Checkout
      uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1
      with:
        fetch-depth: 5

    - name: Verify commit signature
      if: ${{ inputs.skip-verification != 'true' }}
      shell: bash
      run: |
        git verify-commit HEAD^
      continue-on-error: true

    - name: Parse Renovate metadata
      id: parse-metadata
      uses: actions/github-script@v6
      with:
        script: |
          const commitMessage = await exec.getExecOutput('git log --format=%B -n 1 HEAD', [], {silent: true});
          const metadata = commitMessage.stdout.split('---')[1];
          
          if (!metadata) {
            core.setFailed('No metadata found in commit message');
            return;
          }

          const yamlData = require('js-yaml').load(metadata);
          
          if (!yamlData || !yamlData['updated-dependencies'] || yamlData['updated-dependencies'].length === 0) {
            core.setFailed('Invalid or empty metadata');
            return;
          }

          const dependency = yamlData['updated-dependencies'][0];
          
          core.setOutput('update_type', dependency['update-type'] || 'unknown');
          core.setOutput('dependency_name', dependency['dependency-name'] || 'unknown');
          core.setOutput('new_version', dependency['new-version'] || 'unknown');

          console.log('Parsed metadata:', JSON.stringify(dependency, null, 2));
